#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\branch soln
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\size huge
SER 334 
\series bold
Practice
\series default
 Exam OPT
\end_layout

\begin_layout Standard
\align center
Updated 11/16/2021
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
Last Name: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{6cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First Name: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{5.94cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Last 4 digits of ASU ID: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{4.05cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
Exam Instructions
\end_layout

\begin_layout Standard
The exam is open textbook (Operating System Concepts by Silberschatz, Galvin
 and Gagne), as well as open note.
 
\bar under
No electronic items are allowed.
 Write legibly.

\bar default
 Please use a pen (instead of a pencil) if you have one.
 There are 40 points available and the exam must be completed in 0 minutes.
 This exam has two types of questions:
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short answer questions:
\series default
 There are 40 points of short answer questions.
 A typical answer is two or three sentences.
 Each short answer question is worth ~10 points.
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Scenario questions:
\series default
 The programming questions are given near the end of the paper.
 They must be answered on the question paper.
 There are 0 points of write-in programming questions.
\end_layout

\begin_layout Standard
\begin_inset VSpace 9cm
\end_inset


\end_layout

\begin_layout Standard
\align right
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Topic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\;\;\;\;$
\end_inset


\begin_inset Formula $\;\;$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Possible
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: Deadlocks
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: Parallel Programming
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
40
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: Deadlocks
\end_layout

\begin_layout Enumerate
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
[U8.01][align: LisonbeeSQ2] 
\end_layout

\end_inset

Two students are trying to enroll in classes which fill up quickly.
 The first student has requested to be enrolled in both SER334 and SER321;
 he is currently using a seat in both classes.
 The second student has requested to be enrolled in SER334, and is using
 a seat, and is also requesting to be enrolled in SER321 but can't since
 the class is full.
 SER334 still has free seats.
 Neither student plans to take the class after SER321 in the following semester.
 Is this system in a deadlock after the second request? If so, explain which
 processes and/or resources are deadlocked.
 If not, explain the order in which the processes request, use, and release
 the resources.
 [10 points] 
\begin_inset Note Comment
status open

\begin_layout Plain Layout
[SC18] 
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
[U8.04] 
\end_layout

\end_inset

Consider the following resource allocation graph:
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename exams/ser334_unit8_rag.png

\end_inset


\end_layout

\begin_layout Enumerate
There is a cycle in this graph contain P2 and P3 that is not a deadlock.
 Generally speaking, why are some cycles not deadlocks? [5 point]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
What would need to change in this graph for a deadlock to occur between
 P2 and P3? [5 point]
\end_layout

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: Parallel Programming [20 points]
\end_layout

\end_deeper
\begin_layout Enumerate
For an arbitrary control flow graph, how many data flow graphs may the program
 it represents produce? Many? One? Explain.
 [10 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
For the following problem(s), write a functional style (and easily parallelizabl
e) algorithm.
 Use pseudocode.
 You may assume the following functions are available for you to use:
\end_layout

\begin_deeper
\begin_layout Itemize
linked_list create_number_list(int start, int end) //returns a list containing
 integers start to end (inclusive).
\end_layout

\begin_layout Itemize
bool is_odd(int num)
\end_layout

\begin_layout Itemize
linked_list map(void* function, linked_list data)
\end_layout

\begin_layout Itemize
linked_list filter(void*function, linked_list data)
\end_layout

\begin_layout Itemize
void* reduce(void* function, linked_list data)
\end_layout

\begin_layout Standard
A function called 
\begin_inset Quotes eld
\end_inset

int sumOddSquares(int max)
\begin_inset Quotes erd
\end_inset

, which compute the sum of the square of every odd number up to and including
 
\emph on
max
\emph default
.
 For example: the 1+9+25+49...
 and so on.
 [10 points]
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int sumOddSquares(int max) {
\end_layout

\begin_layout Plain Layout

  return reduce(+, map(sqr, filter(is_odd, create_number_lists(1, max)));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
