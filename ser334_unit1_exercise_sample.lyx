#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\branch blank
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\branch soln
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
Arizona State University
\begin_inset space \hfill{}
\end_inset

SER334: Operating Systems & System Programming
\end_layout

\begin_layout Standard
\noindent
Lecturer Acuña (5), UGTA Karaliova (4) 
\begin_inset space \hfill{}
\end_inset

Revised 1/10/2024
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100col%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard

\size huge
Unit 1 Sample Problems - C Programming 
\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\size huge
(SOLN)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
In this sample problem set, we will practice concepts of the C programming
 language.
\end_layout

\begin_layout Itemize
Length: 50 minutes with discussion.
\end_layout

\begin_layout Itemize
Questions: Q1-Q2, Q4, Q6, and Q8.
 (optional: Q3, Q5, Q7, and Q9)
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
\size larger
A Simple C Program
\end_layout

\begin_layout Enumerate
[Acuña] Consider the following implementations of the linear search algorithm
 in both Java and C:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Java,numbers=left,basicstyle={\small},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

import java.util.Scanner;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class LinearSearchExample {   
\end_layout

\begin_layout Plain Layout

    public static boolean find(int target, int[] pool) {
\end_layout

\begin_layout Plain Layout

      for(int i = 0; i < pool.length; i++)
\end_layout

\begin_layout Plain Layout

        if(pool[i] == target)
\end_layout

\begin_layout Plain Layout

          return true;
\end_layout

\begin_layout Plain Layout

      return false;   
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    public static void main(String args[]) {
\end_layout

\begin_layout Plain Layout

        Scanner scanner = new Scanner(System.in);
\end_layout

\begin_layout Plain Layout

        int[] data = {4, 45, 8, 1, 3, 3, 22, 9};
\end_layout

\begin_layout Plain Layout

        int target;
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        System.out.println("What is the target number?");
\end_layout

\begin_layout Plain Layout

        target = scanner.nextInt();
\end_layout

\begin_layout Plain Layout

        if(find(target, data))
\end_layout

\begin_layout Plain Layout

          System.out.println("Found.");
\end_layout

\begin_layout Plain Layout

        else
\end_layout

\begin_layout Plain Layout

          System.out.println("Missing.");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left,basicstyle={\small},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int find(int target, int[] pool, int n) {
\end_layout

\begin_layout Plain Layout

    for(int i = 0; i < n; i++)
\end_layout

\begin_layout Plain Layout

    if(pool[i] == target)
\end_layout

\begin_layout Plain Layout

        return 1;
\end_layout

\begin_layout Plain Layout

    return 0;   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

void main(int argc, char* argv[]) {
\end_layout

\begin_layout Plain Layout

    int[] data = {4, 45, 8, 1, 3, 3, 22, 9};
\end_layout

\begin_layout Plain Layout

    int target;
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    printf("What is the target number?");
\end_layout

\begin_layout Plain Layout

    scanf("%d", &target);
\end_layout

\begin_layout Plain Layout

    if(find(target, data, 8))
\end_layout

\begin_layout Plain Layout

        printf("Found.");
\end_layout

\begin_layout Plain Layout

    else
\end_layout

\begin_layout Plain Layout

        printf("Missing.");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Identify 2 lines that are different because of the library (or run-time)
 being used: [2 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
(There are several answers to this question.) 
\end_layout

\begin_layout Standard
Line 1 (Java): The package containing the Scanner object is imported instead
 of the stdio.h library.
 
\end_layout

\begin_layout Standard
Line 19 (Java): Instead of using System.out.println, the C program uses printf.
\begin_inset VSpace 2cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Identify 2 lines that are different because of the language being used:
 [2 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
(There are several answers to this question.) 
\end_layout

\begin_layout Standard
Line 4 (Java): the find function has a return type of int instead of boolean.
 
\end_layout

\begin_layout Standard
Line 5 (Java): instead of being able to do .length to get the number of elements
 in the array, we have to pass a separate variable called n with the size.
\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
[Acuña] Consider the following program.
 It compiles without any compile-time errors in GCC, yet it contains a total
 of 4 issues (a combination of syntax, and logical problems).
 Study the program to identify all the issues.
 For each issue, list its type (syntactic, logical), what the problem is,
 and how to fix it.
\begin_inset listings
lstparams "language=C,numbers=left"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

	int input;
\end_layout

\begin_layout Plain Layout

	int result;
\end_layout

\begin_layout Plain Layout

	printf("Enter an integer number:
\backslash
n");
\end_layout

\begin_layout Plain Layout

	scanf("d", input);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	result = input % 2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (result = 0)
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nNumber %d is even.", input);
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		printf("
\backslash
nNumber %d is odd.", input);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
First issue: [1 point] 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
Ans: [Acuña] Syntactic.
 The percent sign is missing before the d control symbol for the scanf.
 Add the percent sign to fix.
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Second issue: [1 point] 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
Ans: [Acuña] Syntactic.
 The ampersand is missing for the scanf's parameter.
 Add the ampersand.
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Third issue: [1 point] 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
Ans: [Acuña] Semantic/logical.
 In the conditional of the if-statement, an assignment is used instead of
 a comparison.
 We need to change the = to ==.
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Forth issue: [1 point] 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
Ans: [Acuña] Semantic/Logical.
 It is missing a return statement.
 A return 0; should be added at the end of the program.
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard

\series bold
\size larger
Memory in C
\end_layout

\end_deeper
\begin_layout Enumerate
[Acuña] Consider the following program:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C,basicstyle={\small},showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int badfunction(int* num) {
\end_layout

\begin_layout Plain Layout

    printf("num: %d
\backslash
n", *num);
\end_layout

\begin_layout Plain Layout

    *(num+1) = 7;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

void main(void) {
\end_layout

\begin_layout Plain Layout

    int dont = 1;
\end_layout

\begin_layout Plain Layout

    int doo = 2;
\end_layout

\begin_layout Plain Layout

    int this = 3;
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    printf("#1 dont: %d, do: %d, this: %d
\backslash
n", dont, doo, this);
\end_layout

\begin_layout Plain Layout

    badfunction(&doo);
\end_layout

\begin_layout Plain Layout

    printf("#2 dont: %d, do: %d, this: %d
\backslash
n", dont, doo, this);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Trace this program, and give it's output.
 Explain why it generates that specific output.
 [2 points]
\end_layout

\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\series bold
Ans: [Acuña]
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

#1 dont: 1, do: 2, this: 3
\end_layout

\begin_layout Plain Layout

num: 2
\end_layout

\begin_layout Plain Layout

#2 dont: 7, do: 2, this: 3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The memory for 
\emph on
do
\emph default
 and 
\emph on
dont
\emph default
 are stored contiguously in the stackframe for main().
 When badfunction() is called, it gets an address to 
\emph on
do
\emph default
, which it can manipulate to access anything else in the stack frame for
 main().
 (Note: you would not be expected to know which of 
\emph on
dont
\emph default
 or 
\emph on
this
\emph default
 changed, since that depends on the structure of the stack frame as generated
 by the compiler.)
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
\size larger
C-Style Strings
\end_layout

\end_deeper
\begin_layout Enumerate
[Karaliova] Consider the following declarations in C and Java.
 Answer the following for each declaration: 1) What data type is declared?
 2) What value would we get if we attempt to access myExample[6]? 3) What
 value would we get if we attempt to access myExample[7]? [3 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

a) C:
\end_layout

\begin_layout Plain Layout

char myExample[] = {'s', 'e', 'r', '3','3','4'};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

b) C:
\end_layout

\begin_layout Plain Layout

char myExample[] = "ser334";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

c)Java:
\end_layout

\begin_layout Plain Layout

char[] myExample = {'s', 'e', 'r', '3','3','4'};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\series bold
Ans: [Karaliova]
\end_layout

\begin_layout Enumerate
C: 
\end_layout

\begin_deeper
\begin_layout Standard
char myExample[] = {'s', 'e', 'r', '3','3','4'};
\end_layout

\begin_layout Standard
1) Declared data type: array of characters.
\end_layout

\begin_layout Standard
2) myExample[6] is whatever is stored in memory at that location.
\end_layout

\begin_layout Standard
3) myExample[7] is whatever is stored in memory at that location.
\end_layout

\end_deeper
\begin_layout Enumerate
C:
\end_layout

\begin_deeper
\begin_layout Standard
char myExample[] = "ser334";
\end_layout

\begin_layout Standard
1) Declared data type: C-style string or null-terminated array of characters.
\end_layout

\begin_layout Standard
2) myExample[6] is null ( or 
\backslash
0)
\end_layout

\begin_layout Standard
3) myExample[7] is whatever is stored in memory at that location.
\end_layout

\end_deeper
\begin_layout Enumerate
Java:
\end_layout

\begin_deeper
\begin_layout Standard
char[] myExample = {'s', 'e', 'r', '3','3','4'};
\end_layout

\begin_layout Standard
1) Declared data type: array of characters.
\end_layout

\begin_layout Standard
2) Java throws IndexOutOfBound Exception that prevents myExample[6] from
 being accessed.
\end_layout

\begin_layout Standard
3) Java throws IndexOutOfBound Exception that prevents myExample[7] from
 being accessed.
\end_layout

\end_deeper
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
[Karaliova] What is the difference between '
\backslash
0' and '0' in context of C-style string? What could happen if we replace
 '
\backslash
0' with '0' in a C-style string? [1 point]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\series bold
Ans: [Karaliova]
\end_layout

\begin_layout Standard

\backslash
0 represents null character, and in context of C-style string, it is used
 as a flag (referred to as null character terminator) indicating the end
 of the string.
 If we replace '
\backslash
0' with '0' in a C-style string, we could encounter a segmentation fault
 (memory leak) or a security issue as our program will gain access to bytes
 in memory that it should not be accessing in the first place.
\end_layout

\begin_layout Standard
\begin_inset VSpace 0cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
\size larger
Pointers
\end_layout

\end_deeper
\begin_layout Enumerate
[Acuña] Consider the following fragment of code.
 Using box and arrow notation (boxes represent variables in memory, numbers
 in boxes are values, arrows show when a value is the address of another
 variable), draw out the variables and values that will exist during the
 program's execution.
 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=Java"
inline false
status open

\begin_layout Plain Layout

int num = 14;
\end_layout

\begin_layout Plain Layout

float gpa = 4.34;
\end_layout

\begin_layout Plain Layout

float* gpa_ptr = &gpa;
\end_layout

\begin_layout Plain Layout

float* gpa_ptr2 = &gpa;
\end_layout

\begin_layout Plain Layout

//point a
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

*gpa_ptr = 4.0;
\end_layout

\begin_layout Plain Layout

gpa_ptr2 = (float*)(&num);
\end_layout

\begin_layout Plain Layout

//point b
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
What will exist at point a? [1 points] 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 5cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset Graphics
	filename unit01/sp/ser334_unit1_exercise_flip_soln_q6a.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
What will exist at point b? [1 points] 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 5cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard
\begin_inset Graphics
	filename unit01/sp/ser334_unit1_exercise_flip_soln_q6b.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
[Karaliova] In C, ** notation represents a double pointer (a pointer to
 a pointer).
 What is the difference between && and & in context of pointers? [1 point]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\series bold
Ans: [Karaliova]
\end_layout

\begin_layout Standard
In context of pointers, & is a unary operator which returns address of variable
 following it.
 && is not used in context of pointers (as it wouldn't make much sense to
 have a double address or address of an address operator).
 Like in many other programming languages, && in C is a binary logical AND
 operator.
\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
[Acuña] For the following C code, fill in the value of each variable at
 the given point in the code.
 If the value of the variable cannot be determined at a given point in the
 code, write unknown.
 If the value is an address, write 
\begin_inset Quotes eld
\end_inset

address of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{1cm}{0.15mm}$
\end_layout

\end_inset


\begin_inset Quotes erd
\end_inset

.
 (Hint: There is only one unknown value in this code.) [4 points] 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C,numbers=left"
inline false
status open

\begin_layout Plain Layout

int a, *b, **c, d;
\end_layout

\begin_layout Plain Layout

a = 5;
\end_layout

\begin_layout Plain Layout

d = a + 1;
\end_layout

\begin_layout Plain Layout

b = &a;
\end_layout

\begin_layout Plain Layout

c = &b
\end_layout

\begin_layout Plain Layout

// Point 1
\end_layout

\begin_layout Plain Layout

*b = 8;
\end_layout

\begin_layout Plain Layout

b = &d;
\end_layout

\begin_layout Plain Layout

**c = 3;
\end_layout

\begin_layout Plain Layout

// Point 2
\end_layout

\begin_layout Plain Layout

b+=7;
\end_layout

\begin_layout Plain Layout

// Point 3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch blank
inverted 0
status open

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="7">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int (dereferenced)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pointer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pointer (dereferenced)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int double pointer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variable Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
d
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="7">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int (dereferenced)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pointer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pointer (dereferenced)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int double pointer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variable Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
c
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
d
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of a
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of d
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unknown
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of d+7*4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of d+7*4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
address of b
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\series bold
Note:
\series default
 when incrementing the address stored in b, we move by the size of the type.
 Here that is sizeof(int)=4 bytes, hence 7*4.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
\size larger
Memory Allocation
\end_layout

\end_deeper
\begin_layout Enumerate
[Karaliova] Provide a use case example for situations when it makes sense
 to use a static variable inside a function versus a global variable and
 a use case example of the opposite (when it makes sense to use a global
 variable for the program instead of a static variable inside a function).
 For both use cases, explain your logic.
 [2 points]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch blank
inverted 0
status collapsed

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\series bold
Ans: [Karaliova]
\end_layout

\begin_layout Standard
There could be a multitude of use cases for these two alternative scenarios.
 The underlying logic is that static variable prevents other functions from
 accessing the variable if declared locally as opposed to a global variable,
 where all functions can read and modify the variable.
 My example is a calculator program.
 It would make sense to use a global variable for a counter that keeps track
 of all modifications, so that, for example, methods that perform addition,
 subtraction, multiplication, division, etc, all can increment this global
 modification counter whenever an operation is performed.
 On the other hand, static variables can be declared inside of each method
 to represent counters for a specific operation.
 That is, addition method can have a local static variable for addition
 counter only.
 Making addition counter static variable inside addition function ensures
 that other functions like subtraction, etc, cannot access it.
\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
