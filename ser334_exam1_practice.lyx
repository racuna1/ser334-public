#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\branch soln
\selected 0
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\align center

\series bold
\size huge
SER 334 Practice Exam 1
\series default

\begin_inset Branch soln
inverted 0
status collapsed

\begin_layout Standard

\size huge
(SOLN)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
Updated 2/4/2022
\end_layout

\begin_layout Standard
\align center

\size huge
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard
NOT FOR STUDENT DISTRIBUTION
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
Last Name: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{6cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First Name: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{5.94cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Last 4 digits of ASU ID: 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{4.05cm}{0.15mm}$
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard
\align center
Exam Instructions
\end_layout

\begin_layout Standard
The exam is open one note card (3x5 inches).
 
\bar under
No electronic items are allowed.
 Write legibly.

\bar default
 Please use a pen (instead of a pencil) if you have one.
 There are 80 points available and the exam must be completed in 37.5 minutes.
 This exam has two types of questions:
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Multiple choice questions:
\series default
 There are 30 points of multiple choice questions.
 An answer is selecting one option among the choices given.
 Each multiple choice is worth 2 to 5 points.
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short answer questions:
\series default
 There are 30 points of short answer questions.
 A typical answer is two or three sentences.
 Each short answer question is worth ~10 points.
\end_layout

\begin_layout Standard
\begin_inset Formula $ $
\end_inset


\end_layout

\begin_layout Standard

\series bold
Scenario questions:
\series default
 The programming questions are given near the end of the paper.
 They must be answered on the question paper.
 There are 20 points of write-in programming questions.
\end_layout

\begin_layout Standard
\begin_inset VSpace 7cm
\end_inset


\end_layout

\begin_layout Standard
\align right
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Topic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Earned
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Possible
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MC: C Programming I
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: C Programming I
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MC: C Programming II
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MC: C Programming III
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: C Programming III
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MC: Operating-System Structures
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SA: Operating-System Structures
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scen: C Programming II
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total:
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
80
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\series bold
Multiple Choice: C Programming
\end_layout

\begin_layout Enumerate
What is the difference between global variables and static variables? [5
 points] 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Acuña, Pilcher
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Global variables can be changed, while static variables cannot be changed.
\end_layout

\begin_layout Enumerate
There is no difference between global and static variables since they are
 both stored at the bottom of the execution stack.
\end_layout

\begin_layout Enumerate
Global variables can be accessed from anywhere, while static variables are
 only accessible within the scope where they are defined.
 
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
ANS
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Global variables can only be accessed from the scope in which they were
 defined, while static variables are accessible from anywhere.
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.25cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Consider the following function:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int* getNextUserID() {
\end_layout

\begin_layout Plain Layout

    int users = db_get_user_count("db1");
\end_layout

\begin_layout Plain Layout

    static int uid = users + 1;
\end_layout

\begin_layout Plain Layout

    return &uid;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Will the memory allocation in this function work reliably? [5 points]
\begin_inset Note Note
status open

\begin_layout Plain Layout
FC19
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Yes - it will return an address.
\end_layout

\begin_layout Enumerate
Yes - the memory used by the return value will persist since it is not stack
 memory.
\end_layout

\begin_layout Enumerate
No - the memory used will be overridden by any new function call the program
 makes.
\end_layout

\begin_layout Enumerate
No - it will only work some of the time, depending on when getNextUserID
 is called.
 
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
ANS
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 0.25cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: C Programming
\end_layout

\end_deeper
\begin_layout Enumerate
For the following C code, fill in the value of each variable at the given
 point in the code.
 If the value of the variable cannot be determined at a given point in the
 code, write unknown.
 If the value is an address, write address of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$
\backslash
rule{1cm}{0.15mm}$
\end_layout

\end_inset

.
 [10 points] 
\begin_inset Note Note
status open

\begin_layout Plain Layout
\noindent
Gutierrez
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

int w = 0, *x = &w, y = 0;    
\end_layout

\begin_layout Plain Layout

// Point 1
\end_layout

\begin_layout Plain Layout

w = 5;
\end_layout

\begin_layout Plain Layout

y = -1;                       
\end_layout

\begin_layout Plain Layout

// Point 2
\end_layout

\begin_layout Plain Layout

x = &y;
\end_layout

\begin_layout Plain Layout

y = 10;
\end_layout

\begin_layout Plain Layout

w = y + *x;                   
\end_layout

\begin_layout Plain Layout

// Point 3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 1cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 1
status open

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pointer (dereferenced)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pointer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variable Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Staff Ans:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pointer (dereferenced)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int pointer
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
int
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Variable Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
y
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
add of w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
add of w
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Point 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
add of y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 2cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
Multiple Choice: C Programming II
\end_layout

\end_deeper
\begin_layout Enumerate
What is the output of the following snippet of code? [5 points] 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Pilcher
\end_layout

\end_inset


\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void update(int *var) {
\end_layout

\begin_layout Plain Layout

    int new_int = 10;
\end_layout

\begin_layout Plain Layout

    var = &new_int;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void main() {
\end_layout

\begin_layout Plain Layout

    int num = 20;
\end_layout

\begin_layout Plain Layout

    int *pointer = &num;
\end_layout

\begin_layout Plain Layout

    update(pointer);
\end_layout

\begin_layout Plain Layout

    printf(
\begin_inset Quotes eld
\end_inset

%d
\begin_inset Quotes erd
\end_inset

,*pointer);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
10
\end_layout

\begin_layout Enumerate
20 
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
ANS
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
A compiler error
\end_layout

\begin_layout Enumerate
A run-time error
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.25cm
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Consider a malicious agent which has gained access to the memory space of
 your running program.
 Are they more likely to access data that use stack or heap allocation?
 Explain.
 [5 points]
\begin_inset Note Note
status open

\begin_layout Plain Layout
FC19
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Heap - they will go after the largest data structures in the program.
\end_layout

\begin_layout Enumerate
Heap - it is more monolithic and easy to access.
\end_layout

\begin_layout Enumerate
Stack - it is easier to access and take apart.
 
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
ANS
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Stack - it will grant access to static variables as well
\end_layout

\begin_layout Standard
\begin_inset VSpace 0.25cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
Multiple Choice: C Programming III
\end_layout

\end_deeper
\begin_layout Enumerate
Consider the following snippet of code from 
\shape italic
Student.c, 
\shape default
which defines the class 
\begin_inset Quotes eld
\end_inset

Student.
\begin_inset Quotes erd
\end_inset

 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Edgar, Pilcher
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

typedef struct student student;
\end_layout

\begin_layout Plain Layout

struct student {
\end_layout

\begin_layout Plain Layout

    char* name;
\end_layout

\begin_layout Plain Layout

    char* major;
\end_layout

\begin_layout Plain Layout

    int gpa;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

void destroy_student(student** s){
\end_layout

\begin_layout Plain Layout

    free((*s)->name);
\end_layout

\begin_layout Plain Layout

    free((*s)->major);
\end_layout

\begin_layout Plain Layout

    free(*s);
\end_layout

\begin_layout Plain Layout

    *s = NULL;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Why is the parameter for 
\shape italic
destroy_student
\shape default
 a double pointer? [5 points]
\end_layout

\begin_deeper
\begin_layout Enumerate
There is no reason the parameter is a double pointer, it would work the
 same as a single pointer.
\end_layout

\begin_layout Enumerate
The parameter is a double pointer because it is a struct that points to
 other pointers.
\end_layout

\begin_layout Enumerate
The parameter is a double pointer so that all variables of the struct can
 be freed appropriately.
\end_layout

\begin_layout Enumerate
The parameter is a double pointer to avoid leaving a dangling pointer in
 the caller's scope.
 
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
ANS
\end_layout

\end_inset


\begin_inset VSpace 0.25cm
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: C Programming III
\end_layout

\end_deeper
\begin_layout Enumerate
Consider the following snippet of code that attempts to use a macro to compute
 slope: [10 points]
\begin_inset Note Note
status open

\begin_layout Plain Layout
Edgar
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#define SLOPE(delta_y, delta_x) delta_y/delta_x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void main(){
\end_layout

\begin_layout Plain Layout

    double x1 = 3;
\end_layout

\begin_layout Plain Layout

    double x2 = -1;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

    double y1 = 2;
\end_layout

\begin_layout Plain Layout

    double y2 = 3;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    double slope = SLOPE(y1 - y2, x1 - x2);
\end_layout

\begin_layout Plain Layout

    printf(
\begin_inset Quotes eld
\end_inset

%fl
\begin_inset Quotes erd
\end_inset

, slope); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
This code will not calculate the slope correctly.
 What will the output be? Why?
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch soln
inverted 1
status open

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Staff Ans:
\end_layout

\begin_layout Standard
2.000001
\end_layout

\begin_layout Standard
The substitution will result in the wrong formula: 
\begin_inset Quotes eld
\end_inset

double slope = y1 - y2 / x1 - x2
\begin_inset Quotes erd
\end_inset

 instead of the intended 
\begin_inset Quotes eld
\end_inset

double slope = (y1 - y2) / (x1 - x2)
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace 2.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
How could you fix the problem by changing only the macro? How could you
 fix the problem without changing the macro? 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch soln
inverted 1
status open

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Staff Ans:
\end_layout

\begin_layout Standard
Yes.
\end_layout

\begin_layout Standard
Restructure it to force the order of operation: "#define SLOPE(delta_y,
 delta_x) (delta_y)/(delta_x)".
\end_layout

\begin_layout Standard
\begin_inset VSpace 2.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard

\series bold
Multiple Choice: Operating-System Structures
\end_layout

\end_deeper
\begin_layout Enumerate
A mere month before the end of the semester, you have been assigned the
 task of designing and implementing an entire kernel from scratch.
 What is the best OS structure to implement in this situation and why? [5
 points] 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Acuña, Pilcher
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Simple since it allows for a short development time meaning it can be completed
 by the end of the semester.
 
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
ANS
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Layered since it allows for a reliable design that is easy to maintain.
\end_layout

\begin_layout Enumerate
Microkernel since it is small and very efficient.
\end_layout

\begin_layout Enumerate
Modular since it allows for an extensible design in case you want to add
 to it.
\begin_inset VSpace 0.25cm
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard

\series bold
Short Answer: Operating-System Structures
\end_layout

\end_deeper
\begin_layout Enumerate
Consider the following pieces of functionality:
\end_layout

\begin_deeper
\begin_layout Enumerate
calculating the mean and standard deviation of a dataset.
\end_layout

\begin_layout Enumerate
finding the longest running program.
 
\end_layout

\begin_layout Enumerate
reading the current date/time from the system clock.
\end_layout

\begin_layout Standard
Which of these would need to be implemented as an system call? Justify.
 [10 points]
\begin_inset Note Note
status open

\begin_layout Plain Layout
Acuña
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 1
status open

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\end_inset


\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard

\series bold
Staff Ans:
\end_layout

\begin_layout Standard
a) No.
\end_layout

\begin_layout Standard
b) Yes.
 Requires information that only OS would have/track.
\end_layout

\begin_layout Standard
c) Yes.
 Requires interacting with hardware.
\end_layout

\begin_layout Standard
\begin_inset VSpace 1.5cm
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Scenario: C Programming II [20 points]
\end_layout

\end_deeper
\begin_layout Enumerate
The following declaration of a struct is used to represent a node in a linked
 list of grades.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct grade_node {
\end_layout

\begin_layout Plain Layout

    int value;
\end_layout

\begin_layout Plain Layout

    char assignment[255];
\end_layout

\begin_layout Plain Layout

    struct grade_node* next;
\end_layout

\begin_layout Plain Layout

}; 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Complete the insert_grades(struct node** head) function.
 This function needs to read the data from the keyboard and store the values
 in a new node struct.
 Then, it adds the new node to the beginning of the linked list.
 [20 points]
\begin_inset Note Note
status open

\begin_layout Plain Layout
Acuña
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 1
status collapsed

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

void insert_grades(struct node** head) { 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard
\noindent

\series bold
Staff Ans:
\series default

\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

void insert_grades(struct node** head) {
\end_layout

\begin_layout Plain Layout

  //set up vars
\end_layout

\begin_layout Plain Layout

  int val;
\end_layout

\begin_layout Plain Layout

  char assign[255];
\end_layout

\begin_layout Plain Layout

  struct grade_node* node = (struct grade_node*)malloc(sizeof(struct grade_node)
);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //read data
\end_layout

\begin_layout Plain Layout

  scanf("%d", &value);
\end_layout

\begin_layout Plain Layout

  scanf("%s", assign);		//scanf("%s", node->assignment);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //set values in node
\end_layout

\begin_layout Plain Layout

  node->value = val;
\end_layout

\begin_layout Plain Layout

  strcpy(node->assignment, assign);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  //update list (next)
\end_layout

\begin_layout Plain Layout

  node->next = *head;
\end_layout

\begin_layout Plain Layout

  *head = node;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 6cm
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part*
Extra Questions
\end_layout

\begin_layout Standard
The following questions were used on previous practice exams - they are
 not part of the practice exam, and may use content not covered in the current
 semester, but are provided for additional practice.
\end_layout

\begin_layout Standard

\series bold
Short Answer: C Programming II
\end_layout

\begin_layout Enumerate
Define a new datatype to represent a book.
 A book should contain a title, an author, a genre (fiction, comedy, nonfiction,
 or drama; don't use a string), and bookmark position.
 Use all proper syntax and indicate any assumptions you made.
 [10 points]
\begin_inset Note Note
status open

\begin_layout Plain Layout
Acuña
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Branch soln
inverted 0
status open

\begin_layout Standard
\noindent
\align left

\series bold
Staff Ans:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C"
inline false
status open

\begin_layout Plain Layout

enum book_genre {FICTION=0, COMEDY, NONFICTION, DRAMA}; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct book {
\end_layout

\begin_layout Plain Layout

   //assumes title and author are less than 254 characters
\end_layout

\begin_layout Plain Layout

   char  title[255];
\end_layout

\begin_layout Plain Layout

   char  author[255];
\end_layout

\begin_layout Plain Layout

   book_genre bg;
\end_layout

\begin_layout Plain Layout

   int   bookmark;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\end_body
\end_document
